import { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { SeoSetting, InsertSeoSetting } from '../../../shared/schema';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Search, Globe, Share2, Code, Eye, TestTube, Plus, Edit, Trash2, AlertTriangle, CheckCircle, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

export default function SEOManagement() {
  const [currentView, setCurrentView] = useState<'list' | 'form'>('list');
  const [editingId, setEditingId] = useState<string | null>(null);
  const [fetchingGoogle, setFetchingGoogle] = useState<string | null>(null);
  const [googleResults, setGoogleResults] = useState<{[key: string]: any}>({});
  const [imageValidation, setImageValidation] = useState<{[key: string]: {loading: boolean, result?: any}}>({});
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch SEO settings
  const { data: seoSettings = [], isLoading: seoLoading, refetch: refetchSeo } = useQuery({
    queryKey: ['/api/seo-settings'],
  });

  // Find the editing setting from the already loaded list
  const editingSetting = editingId ? (seoSettings as SeoSetting[]).find((s: SeoSetting) => s.id === editingId) || null : null;
  const editingLoading = false;

  // SEO form state
  const [seoForm, setSeoForm] = useState<Partial<InsertSeoSetting>>({
    page: '',
    urlSlug: '',
    metaTitle: '',
    metaDescription: '',
    robotsDirectives: 'index,follow',
    canonicalUrl: '',
    ogTitle: '',
    ogDescription: '',
    ogImageUrl: '',
    twitterTitle: '',
    twitterDescription: '',
    twitterImageUrl: '',
    jsonLd: null,
    autoGenerateFaq: false,
    autoGenerateVideos: false,
  });

  // Auto-generation state
  const [autoGeneratedJsonLd, setAutoGeneratedJsonLd] = useState<any>(null);
  const [loadingAutoGenerate, setLoadingAutoGenerate] = useState(false);

  // Reset form when editing changes
  useEffect(() => {
    if (editingSetting) {
      console.log('Loading editing setting:', editingSetting);
      console.log('Form before loading:', seoForm);
      
      const newFormData = {
        page: editingSetting.page || '',
        urlSlug: editingSetting.urlSlug || '',
        metaTitle: editingSetting.metaTitle || '',
        metaDescription: editingSetting.metaDescription || '',
        robotsDirectives: editingSetting.robotsDirectives || 'index,follow',
        canonicalUrl: editingSetting.canonicalUrl || '',
        ogTitle: editingSetting.ogTitle || '',
        ogDescription: editingSetting.ogDescription || '',
        ogImageUrl: editingSetting.ogImageUrl || '',
        twitterTitle: editingSetting.twitterTitle || '',
        twitterDescription: editingSetting.twitterDescription || '',
        twitterImageUrl: editingSetting.twitterImageUrl || '',
        jsonLd: editingSetting.jsonLd || null,
        autoGenerateFaq: editingSetting.autoGenerateFaq || false,
        autoGenerateVideos: editingSetting.autoGenerateVideos || false,
      };
      
      console.log('Form after loading:', newFormData);
      setSeoForm(newFormData);
    } else if (currentView === 'form' && !editingId) {
      // Reset for new entry
      console.log('Resetting form for new entry');
      setSeoForm({
        page: '',
        urlSlug: '',
        metaTitle: '',
        metaDescription: '',
        robotsDirectives: 'index,follow',
        canonicalUrl: '',
        ogTitle: '',
        ogDescription: '',
        ogImageUrl: '',
        twitterTitle: '',
        twitterDescription: '',
        twitterImageUrl: '',
        jsonLd: null,
        autoGenerateFaq: false,
        autoGenerateVideos: false,
      });
    }
  }, [editingSetting, currentView, editingId]);

  // Mutations
  const createSeoMutation = useMutation({
    mutationFn: (data: InsertSeoSetting) => apiRequest('/api/seo-settings', {
      method: 'POST',
      body: JSON.stringify(data),
    }),
    onSuccess: () => {
      refetchSeo();
      setCurrentView('list');
      setEditingId(null);
      toast({ title: 'SEO setting created successfully!' });
    },
    onError: () => {
      toast({ title: 'Error creating SEO setting', variant: 'destructive' });
    }
  });

  const updateSeoMutation = useMutation({
    mutationFn: ({ id, data }: { id: string; data: Partial<InsertSeoSetting> }) => 
      apiRequest(`/api/seo-settings/${id}`, {
        method: 'PUT',
        body: JSON.stringify(data),
      }),
    onSuccess: () => {
      refetchSeo();
      setCurrentView('list');
      setEditingId(null);
      toast({ title: 'SEO setting updated successfully!' });
    },
    onError: () => {
      toast({ title: 'Error updating SEO setting', variant: 'destructive' });
    }
  });

  const deleteSeoMutation = useMutation({
    mutationFn: (id: string) => apiRequest(`/api/seo-settings/${id}`, { method: 'DELETE' }),
    onSuccess: () => {
      refetchSeo();
      toast({ title: 'SEO setting deleted successfully!' });
    },
    onError: () => {
      toast({ title: 'Error deleting SEO setting', variant: 'destructive' });
    }
  });

  // Handle form submission
  const handleSubmit = () => {
    if (editingId) {
      updateSeoMutation.mutate({ id: editingId, data: seoForm });
    } else {
      createSeoMutation.mutate(seoForm as InsertSeoSetting);
    }
  };

  // Handle auto-generation
  const handleAutoGenerate = async () => {
    if (!editingId) {
      toast({ title: 'Save the SEO setting first to generate auto JSON-LD', variant: 'destructive' });
      return;
    }

    setLoadingAutoGenerate(true);
    try {
      const response = await fetch(`/api/seo-settings/${editingId}/auto-json-ld`);
      const data = await response.json();
      setAutoGeneratedJsonLd(data);
      toast({ title: 'JSON-LD generated successfully!' });
    } catch (error) {
      toast({ title: 'Error generating JSON-LD', variant: 'destructive' });
    } finally {
      setLoadingAutoGenerate(false);
    }
  };

  // Handle Fetch as Google
  const handleFetchAsGoogle = async (id: string) => {
    setFetchingGoogle(id);
    try {
      const response = await fetch(`/api/seo-settings/${id}/fetch-as-google`, {
        method: 'POST',
      });
      const data = await response.json();
      setGoogleResults({ ...googleResults, [id]: data });
      toast({ title: 'Fetch as Google completed!' });
    } catch (error) {
      toast({ title: 'Error fetching as Google', variant: 'destructive' });
    } finally {
      setFetchingGoogle(null);
    }
  };

  // List View
  if (currentView === 'list') {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div>
            <h2 className="text-2xl font-bold text-memopyk-navy">SEO Settings</h2>
            <p className="text-memopyk-blue">Manage meta tags, social sharing, and structured data</p>
          </div>
          <Button
            onClick={() => {
              setCurrentView('form');
              setEditingId(null);
            }}
            className="bg-memopyk-highlight hover:bg-memopyk-highlight/90 text-white"
          >
            <Plus className="w-4 h-4 mr-2" />
            Add New SEO Setting
          </Button>
        </div>

        {seoLoading ? (
          <div className="text-center py-12">
            <div className="text-memopyk-blue text-lg">Loading SEO settings...</div>
          </div>
        ) : (
          <Card>
            <CardHeader>
              <CardTitle className="text-memopyk-navy">SEO Settings Overview</CardTitle>
            </CardHeader>
            <CardContent>
              {(seoSettings as SeoSetting[]).length === 0 ? (
                <div className="text-center py-12">
                  <Search className="w-16 h-16 text-memopyk-blue/50 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold text-memopyk-navy mb-2">No SEO settings yet</h3>
                  <p className="text-memopyk-blue">Create your first SEO setting to get started.</p>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b border-memopyk-blue/20">
                        <th className="text-left py-3 px-4 font-semibold text-memopyk-navy">Page</th>
                        <th className="text-left py-3 px-4 font-semibold text-memopyk-navy">URL Slug</th>
                        <th className="text-left py-3 px-4 font-semibold text-memopyk-navy">Meta Title</th>
                        <th className="text-left py-3 px-4 font-semibold text-memopyk-navy">Updated At</th>
                        <th className="text-left py-3 px-4 font-semibold text-memopyk-navy">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {(seoSettings as SeoSetting[]).map((setting: SeoSetting) => (
                        <tr key={setting.id} className="border-b border-memopyk-blue/10 hover:bg-memopyk-sky/5">
                          <td className="py-3 px-4 text-memopyk-blue font-medium">{setting.page}</td>
                          <td className="py-3 px-4 text-memopyk-blue">{setting.urlSlug}</td>
                          <td className="py-3 px-4 text-memopyk-blue max-w-xs truncate">{setting.metaTitle}</td>
                          <td className="py-3 px-4 text-memopyk-blue">
                            {new Date(setting.updatedAt).toLocaleDateString()}
                          </td>
                          <td className="py-3 px-4">
                            <div className="flex gap-2">
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => {
                                  setEditingId(setting.id);
                                  setCurrentView('form');
                                }}
                                className="border-memopyk-blue text-memopyk-blue hover:bg-memopyk-blue hover:text-white"
                              >
                                <Edit className="w-4 h-4" />
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleFetchAsGoogle(setting.id)}
                                disabled={fetchingGoogle === setting.id}
                                className="border-memopyk-highlight text-memopyk-highlight hover:bg-memopyk-highlight hover:text-white"
                              >
                                {fetchingGoogle === setting.id ? (
                                  <div className="w-4 h-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
                                ) : (
                                  <TestTube className="w-4 h-4" />
                                )}
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => deleteSeoMutation.mutate(setting.id)}
                                disabled={deleteSeoMutation.isPending}
                                className="border-red-500 text-red-500 hover:bg-red-500 hover:text-white"
                              >
                                <Trash2 className="w-4 h-4" />
                              </Button>
                            </div>
                            {googleResults[setting.id] && (
                              <div className="mt-2 text-xs">
                                {googleResults[setting.id].success ? (
                                  <>
                                    <div className="text-green-600">✓ Status: {googleResults[setting.id].status} {googleResults[setting.id].statusText}</div>
                                    <div className="text-memopyk-blue">URL: {googleResults[setting.id].url}</div>
                                    <div className="text-memopyk-blue-light">Tested: {new Date(googleResults[setting.id].timestamp).toLocaleTimeString()}</div>
                                  </>
                                ) : (
                                  <>
                                    <div className="text-red-600">✗ Error: {googleResults[setting.id].error}</div>
                                    <div className="text-memopyk-blue">URL: {googleResults[setting.id].url}</div>
                                  </>
                                )}
                              </div>
                            )}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    );
  }

  // Form View with complete tabbed interface
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-memopyk-navy">
            {editingId ? 'Edit SEO Setting' : 'New SEO Setting'}
          </h2>
          {editingSetting && (
            <div className="mt-2 p-3 bg-memopyk-sky/20 rounded-lg border border-memopyk-blue/30">
              <div className="flex items-center gap-3">
                <div className="text-sm font-semibold text-memopyk-navy">
                  Editing Page:
                </div>
                <div className="text-sm font-medium text-memopyk-blue bg-white px-3 py-1 rounded-md">
                  {editingSetting.page} ({editingSetting.urlSlug})
                </div>
                <div className="text-xs text-memopyk-blue-light">
                  {editingSetting.urlSlug === '/fr' ? '🇫🇷 French Homepage' : 
                   editingSetting.urlSlug === '/en' ? '🇬🇧 English Homepage' : 
                   `Page: ${editingSetting.page}`}
                </div>
              </div>
            </div>
          )}
          <p className="text-memopyk-blue mt-2">Configure meta tags, social sharing, and structured data</p>
        </div>
        <Button
          variant="outline"
          onClick={() => {
            setCurrentView('list');
            setEditingId(null);
          }}
          className="border-memopyk-blue text-memopyk-blue hover:bg-memopyk-blue hover:text-white"
        >
          ← Back to List
        </Button>
      </div>

      {editingLoading ? (
        <div className="text-center py-12">
          <div className="text-memopyk-blue text-lg">Loading SEO setting...</div>
        </div>
      ) : (
        <Tabs defaultValue="meta" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4 bg-memopyk-cream border border-memopyk-blue/20">
            <TabsTrigger value="meta" className="data-[state=active]:bg-memopyk-blue data-[state=active]:text-white">
              <Globe className="w-4 h-4 mr-2" />
              Meta
            </TabsTrigger>
            <TabsTrigger value="social" className="data-[state=active]:bg-memopyk-blue data-[state=active]:text-white">
              <Share2 className="w-4 h-4 mr-2" />
              Social
            </TabsTrigger>
            <TabsTrigger value="structured" className="data-[state=active]:bg-memopyk-blue data-[state=active]:text-white">
              <Code className="w-4 h-4 mr-2" />
              Structured Data
            </TabsTrigger>
            <TabsTrigger value="preview" className="data-[state=active]:bg-memopyk-blue data-[state=active]:text-white">
              <Eye className="w-4 h-4 mr-2" />
              Preview & Testing
            </TabsTrigger>
          </TabsList>

          <TabsContent value="meta" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-memopyk-navy">Meta Tags Configuration</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-memopyk-navy mb-2">Page Name</label>
                    <Input
                      value={seoForm.page || ''}
                      onChange={(e) => setSeoForm({ ...seoForm, page: e.target.value })}
                      placeholder="e.g., home, about, contact"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-memopyk-navy mb-2">URL Slug</label>
                    <Input
                      value={seoForm.urlSlug || ''}
                      onChange={(e) => setSeoForm({ ...seoForm, urlSlug: e.target.value })}
                      placeholder="e.g., /, /about, /contact"
                    />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-memopyk-navy mb-2">Meta Title</label>
                  <Input
                    value={seoForm.metaTitle || ''}
                    onChange={(e) => setSeoForm({ ...seoForm, metaTitle: e.target.value })}
                    placeholder="Page title for search engines (50-60 characters)"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-memopyk-navy mb-2">Meta Description</label>
                  <Textarea
                    value={seoForm.metaDescription || ''}
                    onChange={(e) => setSeoForm({ ...seoForm, metaDescription: e.target.value })}
                    placeholder="Page description for search results (150-160 characters)"
                    rows={3}
                  />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-memopyk-navy mb-2">Robots Directives</label>
                    <Input
                      value={seoForm.robotsDirectives || ''}
                      onChange={(e) => setSeoForm({ ...seoForm, robotsDirectives: e.target.value })}
                      placeholder="e.g., index,follow or noindex,nofollow"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-memopyk-navy mb-2">Canonical URL</label>
                    <Input
                      value={seoForm.canonicalUrl || ''}
                      onChange={(e) => setSeoForm({ ...seoForm, canonicalUrl: e.target.value })}
                      placeholder="https://memopyk.com/page"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="social" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-memopyk-navy">Open Graph (Facebook)</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-memopyk-navy mb-2">OG Title</label>
                    <Input
                      value={seoForm.ogTitle || ''}
                      onChange={(e) => setSeoForm({ ...seoForm, ogTitle: e.target.value })}
                      placeholder="Title for social sharing"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-memopyk-navy mb-2">OG Description</label>
                    <Textarea
                      value={seoForm.ogDescription || ''}
                      onChange={(e) => setSeoForm({ ...seoForm, ogDescription: e.target.value })}
                      placeholder="Description for social sharing"
                      rows={3}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-memopyk-navy mb-2">OG Image URL</label>
                    <Input
                      value={seoForm.ogImageUrl || ''}
                      onChange={(e) => setSeoForm({ ...seoForm, ogImageUrl: e.target.value })}
                      placeholder="https://memopyk.com/og-image.jpg (1200×630px)"
                    />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-memopyk-navy">Twitter Cards</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-memopyk-navy mb-2">Twitter Title</label>
                    <Input
                      value={seoForm.twitterTitle || ''}
                      onChange={(e) => setSeoForm({ ...seoForm, twitterTitle: e.target.value })}
                      placeholder="Title for Twitter sharing"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-memopyk-navy mb-2">Twitter Description</label>
                    <Textarea
                      value={seoForm.twitterDescription || ''}
                      onChange={(e) => setSeoForm({ ...seoForm, twitterDescription: e.target.value })}
                      placeholder="Description for Twitter sharing"
                      rows={3}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-memopyk-navy mb-2">Twitter Image URL</label>
                    <Input
                      value={seoForm.twitterImageUrl || ''}
                      onChange={(e) => setSeoForm({ ...seoForm, twitterImageUrl: e.target.value })}
                      placeholder="https://memopyk.com/twitter-image.jpg (1200×600px)"
                    />
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="structured" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-memopyk-navy">Structured Data (JSON-LD)</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <label className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={Boolean(seoForm.autoGenerateFaq)}
                      onChange={(e) => setSeoForm({ ...seoForm, autoGenerateFaq: e.target.checked })}
                      className="w-4 h-4 text-memopyk-blue"
                    />
                    <span className="text-memopyk-navy">Auto-generate FAQ JSON-LD</span>
                  </label>
                  <label className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={Boolean(seoForm.autoGenerateVideos)}
                      onChange={(e) => setSeoForm({ ...seoForm, autoGenerateVideos: e.target.checked })}
                      className="w-4 h-4 text-memopyk-blue"
                    />
                    <span className="text-memopyk-navy">Auto-generate Video JSON-LD</span>
                  </label>
                </div>

                {editingId && (
                  <div className="flex gap-2">
                    <Button
                      onClick={handleAutoGenerate}
                      disabled={loadingAutoGenerate}
                      className="bg-memopyk-blue hover:bg-memopyk-blue/90 text-white"
                    >
                      {loadingAutoGenerate ? 'Generating...' : 'Generate Auto JSON-LD'}
                    </Button>
                  </div>
                )}

                {autoGeneratedJsonLd && (
                  <div>
                    <label className="block text-sm font-medium text-memopyk-navy mb-2">Auto-Generated JSON-LD</label>
                    <pre className="bg-memopyk-cream border border-memopyk-blue/20 rounded-lg p-4 text-xs overflow-auto max-h-40">
                      {JSON.stringify(autoGeneratedJsonLd, null, 2)}
                    </pre>
                  </div>
                )}

                <div>
                  <label className="block text-sm font-medium text-memopyk-navy mb-2">Manual JSON-LD Override</label>
                  <Textarea
                    value={seoForm.jsonLd ? String(seoForm.jsonLd) : ''}
                    onChange={(e) => setSeoForm({ ...seoForm, jsonLd: e.target.value })}
                    placeholder='{"@context": "https://schema.org", "@type": "Organization", ...}'
                    rows={8}
                    className="font-mono text-sm"
                  />
                  <p className="text-xs text-memopyk-blue mt-1">
                    Leave empty to use auto-generated JSON-LD. Manual content overrides auto-generation.
                  </p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="preview" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-memopyk-navy">Search Snippet Preview</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="border border-memopyk-blue/20 rounded-lg p-4 bg-white">
                    <div className="text-blue-600 text-lg hover:underline cursor-pointer">
                      {seoForm.metaTitle || 'Page Title'}
                    </div>
                    <div className="text-green-600 text-sm">
                      https://memopyk.com{seoForm.urlSlug || '/page'}
                    </div>
                    <div className="text-gray-600 text-sm mt-1">
                      {seoForm.metaDescription || 'Page description will appear here...'}
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-memopyk-navy">Social Card Preview</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="border border-memopyk-blue/20 rounded-lg overflow-hidden bg-white">
                    <div className="h-32 bg-gray-200 flex items-center justify-center">
                      {seoForm.ogImageUrl ? (
                        <img
                          src={seoForm.ogImageUrl}
                          alt="OG Preview"
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <span className="text-gray-500">1200×630px Image</span>
                      )}
                    </div>
                    <div className="p-3">
                      <div className="font-semibold text-sm">
                        {seoForm.ogTitle || seoForm.metaTitle || 'Social Title'}
                      </div>
                      <div className="text-xs text-gray-600 mt-1">
                        {seoForm.ogDescription || seoForm.metaDescription || 'Social description...'}
                      </div>
                      <div className="text-xs text-gray-500 mt-1">memopyk.com</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {editingId && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-memopyk-navy">Testing Tools</CardTitle>
                </CardHeader>
                <CardContent>
                  <Button
                    onClick={() => handleFetchAsGoogle(editingId)}
                    disabled={fetchingGoogle === editingId}
                    className="bg-memopyk-highlight hover:bg-memopyk-highlight/90 text-white"
                  >
                    {fetchingGoogle === editingId ? (
                      <>
                        <div className="w-4 h-4 mr-2 animate-spin rounded-full border-2 border-current border-t-transparent" />
                        Testing...
                      </>
                    ) : (
                      <>
                        <TestTube className="w-4 h-4 mr-2" />
                        Fetch as Google
                      </>
                    )}
                  </Button>
                  {googleResults[editingId] && (
                    <div className="mt-4 p-4 bg-memopyk-cream rounded-lg">
                      <h4 className="font-semibold text-memopyk-navy mb-2">Test Results</h4>
                      <div className="space-y-2 text-sm">
                        <div>Status: <span className="text-green-600">{googleResults[editingId].status}</span></div>
                        <div>Load Time: <span className="text-memopyk-blue">{googleResults[editingId].loadTime}ms</span></div>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}
          </TabsContent>

          <div className="flex justify-end gap-3 pt-6 border-t border-memopyk-blue/20">
            <Button
              variant="outline"
              onClick={() => {
                setCurrentView('list');
                setEditingId(null);
              }}
              className="border-memopyk-blue text-memopyk-blue hover:bg-memopyk-blue hover:text-white"
            >
              Cancel
            </Button>
            <Button
              onClick={handleSubmit}
              disabled={createSeoMutation.isPending || updateSeoMutation.isPending}
              className="bg-memopyk-highlight hover:bg-memopyk-highlight/90 text-white"
            >
              {createSeoMutation.isPending || updateSeoMutation.isPending ? 'Saving...' : 'Save SEO Setting'}
            </Button>
          </div>
        </Tabs>
      )}
    </div>
  );
}